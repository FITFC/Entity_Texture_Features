plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

archivesBaseName = rootProject.archives_base_name + "_neoforge_${rootProject.minecraft_version}"

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
//    neoForge{
//        convertAccessWideners = true

//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
//    }
//    forge {
//        convertAccessWideners = true
//        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
//        mixinConfig "entity_texture_features-forge.mixins.json"
//        mixinConfig "entity_texture_features-common.mixins.json"
//
//    }
}


configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories{
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
//    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

//    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }

    implementation("org.apache.httpcomponents:httpmime:4.5.10")
    shadow('org.apache.httpcomponents:httpmime:4.5.14')


//    modImplementation("maven.modrinth:3dskinlayers:${project.skinlayers_version_forge}") {
//        //exclude(group: "net.fabricmc.fabric-api")
//    }

    include group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.10'
    implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.10'
}


shadowJar {
    exclude "fabric.mod.json"
    int mc = project.mc_build as int
    if (mc > 5) {
        exclude "META-INF/mods.toml"
    }else{
        exclude "META-INF/neoforge.mods.toml"
    }

    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
//    classifier "dev-shadow"
    archiveClassifier.set('dev-shadow')
}

remapJar {

    atAccessWideners.add("entity_texture_features_${project.mc_build}.accesswidener")
    input.set shadowJar.archiveFile
    dependsOn shadowJar
//    classifier null
    archiveClassifier.set(null)
}

jar {
//    classifier "dev"
    archiveClassifier.set('dev')
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

repositories {
    mavenCentral()
}
