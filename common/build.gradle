architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/entity_texture_features_${project.mc_build}.accesswidener")
}

dependencies {
    int mc_build = project.mc_build as int

    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    //modApi "dev.architectury:architectury:${rootProject.architectury_version}"
    modImplementation("maven.modrinth:3dskinlayers:${project.skinlayers_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("maven.modrinth:sodium:${project.sodium_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modImplementation("maven.modrinth:iris:${project.iris_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    if (mc_build == 5 || mc_build == 3 || mc_build == 6) {
        //todo does 1.20.1 build need seperate version just for referencing 3 files?
        //todo future versions wont need seperate dh beta for dual renamed classes support
        modImplementation files("build/iris-1.7.0-snapshot+mc1.20.4-dfec34d-dirty.jar")
    }

    modImplementation("maven.modrinth:immediatelyfast:${project.immediatelyfast_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }
    //immedeatelyfast renamed the mixin target class in v1.2.16 for now keep support for both but drop eventually
    if (mc_build >= 2 && mc_build <= 7) {
        modImplementation files("build/ImmediatelyFast-Fabric-1.2.15+1.20.6.jar")
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }

    jar {
        from("LICENSE") {
            rename { "License_${project.archivesBaseName}_${project.version}.txt" }
        }
//        from("CHANGELOG.md") {
//            rename { "Changelog_${project.version}.md" }
//        }
    }
}
